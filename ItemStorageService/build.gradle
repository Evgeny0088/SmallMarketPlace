plugins {
    id 'idea'
    id 'java'
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'com.avast.gradle.docker-compose' version '0.14.3'
}

group = 'com.marketplace'
version = '1.0'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1")
}

dependencies {
    // starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'com.mattunderscore:filter-utils:0.2.8'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.4'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'redis.clients:jedis'

    // dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // kafka
    implementation 'org.springframework.kafka:spring-kafka:2.8.3'
    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'
    // database
    implementation 'org.liquibase:liquibase-core'
    implementation "org.hibernate:hibernate-gradle-plugin:5.6.2.Final"
    implementation 'org.postgresql:postgresql'
    // cache
    implementation 'org.ehcache:ehcache'
    // logging
    implementation 'ch.qos.logback:logback-classic'
    // swagger
    implementation "org.springdoc:springdoc-openapi-ui:1.6.6"
    // testing
    testImplementation 'org.apache.kafka:kafka-clients:3.1.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'org.testcontainers:postgresql:1.16.3'
    testImplementation "org.testcontainers:kafka:1.16.3"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.32.0'
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'com.smallmarketplace:requestBodyParser-starter:1.0:all'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//######### Jacoco TASKS ########

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
        xml.destination(file("${buildDir}/coverage/jacoco.xml"))
        html.destination(file("${buildDir}/coverage/jacoco.html"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
        rule {
            failOnViolation(false)
            enabled = true
            element = 'CLASS'
            includes = ['com.marketplace.itemstorageservice.*']
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 0.3
            }
        }
    }
}

//######### TEST TASKS ##########

task brandWireMockTest(type: Test) {
    description("tests of BrandControllerWireMockTest controller layer")
    filter { includeTestsMatching 'com.marketplace.itemstorageservice.controller.BrandControllerWireMockTest' }
    useJUnitPlatform()
}

task itemWireMockTest(type: Test) {
    description("tests of ItemControllerWireMockTest controller layer")
    filter { includeTestsMatching 'com.marketplace.itemstorageservice.controller.ItemControllerWireMockTest' }
    useJUnitPlatform()
}

task brandService(type: Test) {
    description("tests of BrandService class")
    filter { includeTestsMatching 'BrandServiceTest' }
    useJUnitPlatform()
}

task itemCreation(type: Test) {
    description("tests of ItemService class - > cover only item creation cases")
    filter { includeTestsMatching 'ItemServiceCreateItemTest' }
    useJUnitPlatform()
}

task itemDeletion(type: Test) {
    description("tests of ItemService class - > cover only item delete cases")
    filter { includeTestsMatching 'ItemServiceDeleteItemTest' }
    useJUnitPlatform()

}

task itemUpdate(type: Test) {
    description("tests of ItemService class - > cover only item update cases")
    filter { includeTestsMatching 'ItemServiceUpdateItemTest' }
    useJUnitPlatform()
}

task testsRun(type:Test){
    useJUnitPlatform()
    dependsOn(tasks.named('brandWireMockTest'))
    dependsOn(tasks.named('itemWireMockTest'))
    dependsOn(tasks.named('brandService'))
    dependsOn(tasks.named('itemCreation'))
    dependsOn(tasks.named('itemDeletion'))
    dependsOn(tasks.named('itemUpdate'))
    testLogging {
        events "passed", "failed", "skipped"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('sonarqube').configure {
    dependsOn test
}

//######### JAR TASKS ##########

var service_version = '1.0'
var jar_name = 'itemstorage-service'
var spring_profile='spring.profiles.active'
var profile_dev='dev'
var profile_local='local'

bootJar {
    archiveFileName.set("${jar_name}-boot-${service_version}.jar")
}

//######### LOCAL RUN ##########

tasks.register("rundev") {
    group = "application"
    description = "Runs the Spring Boot application with the dev profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("${spring_profile}", "${profile_dev}")
        }
    }
    finalizedBy("bootRun")
}

tasks.register("runlocal") {
    group = "application"
    description = "Runs the Spring Boot application with the local profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("${spring_profile}", "${profile_local}")
        }
    }
    finalizedBy("bootRun")
}

jar{
    enabled(false)
}