plugins {
    id 'idea'
    id 'java'
    id 'groovy'
    id "nebula.integtest" version "9.6.3"
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group = 'com.marketplace'
version = '1.0'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1")
}

dependencies {
    // starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'com.mattunderscore:filter-utils:0.2.8'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.4'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'redis.clients:jedis'

    // dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // kafka
    implementation 'org.springframework.kafka:spring-kafka:2.8.3'
    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'
    // database
    implementation 'org.liquibase:liquibase-core'
    implementation "org.hibernate:hibernate-gradle-plugin:5.6.2.Final"
    implementation 'org.postgresql:postgresql'
    // cache
    implementation 'org.ehcache:ehcache'
    // logging
    implementation 'ch.qos.logback:logback-classic'
    // swagger
    implementation "org.springdoc:springdoc-openapi-ui:1.6.6"
    // testing
    testImplementation 'org.apache.kafka:kafka-clients:3.1.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'org.testcontainers:postgresql:1.16.3'
    testImplementation "org.testcontainers:kafka:1.16.3"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'com.smallmarketplace:requestBodyParser-starter:1.0:all'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

integrationTest{
    useJUnitPlatform()
}

//######### TEST TASKS ##########

plugins.apply("nebula.integtest")
facets {
    integTest {
        parentSourceSet = 'main'
        testTaskName = 'integrationTest'
        includeInCheckLifecycle = false
    }
}

task wireMockTests(type: Test) {
    description("batch of tests of rest-api via wiremock server and webtest client")
    filter { includeTestsMatching 'com.marketplace.itemstorageservice.controller.*' }
    useJUnitPlatform()
}

task brandService(type: Test) {
    description("tests of BrandService class")
    filter { includeTestsMatching 'BrandServiceTest' }
    useJUnitPlatform()
}

task itemCreation(type: Test) {
    description("tests of ItemService class - > cover only item creation cases")
    filter { includeTestsMatching 'ItemServiceCreateItemTest' }
    useJUnitPlatform()
}

task itemDeletion(type: Test) {
    description("tests of ItemService class - > cover only item delete cases")
    filter { includeTestsMatching 'ItemServiceDeleteItemTest' }
    useJUnitPlatform()

}

task itemUpdate(type: Test) {
    description("tests of ItemService class - > cover only item update cases")
    filter { includeTestsMatching 'ItemServiceUpdateItemTest' }
    useJUnitPlatform()
}

task testsRun(type:Test){
    dependsOn(tasks.named('wireMockTests'))
    dependsOn(tasks.named('brandService'))
    dependsOn(tasks.named('itemCreation'))
    dependsOn(tasks.named('itemDeletion'))
    dependsOn(tasks.named('itemUpdate'))
    testLogging {
        events "passed", "failed", "skipped"
    }
}

//######### JAR TASKS ##########

var service_version = '1.0'
var jar_name = 'itemstorage-service'
var spring_profile='spring.profiles.active'
var profile_value='dev'

task ItemStorageShadow(type: Jar, dependsOn: shadowJar) {
    archiveBaseName.set("${jar_name}-shadowJar")
    archiveVersion.set("${service_version}")
    manifest {
        attributes 'Main-Class': 'com.marketplace.itemstorageservice.ItemStorageServiceApplication.java'
    }
    from zipTree(shadowJar.archiveFile)
}

bootJar {
    archiveFileName.set("${jar_name}-boot-${service_version}.jar")
}

//######### LOCAL RUN ##########

tasks.register("rundev") {
    group = "application"
    description = "Runs the Spring Boot application with the dev profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("${spring_profile}", "${profile_value}")
        }
    }
    finalizedBy("bootRun")
}

tasks.build.dependsOn(tasks.named("testsRun"))